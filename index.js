const { fifaData } = require('./fifa.js')


/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */

//(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)

//(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)

//(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)

//(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)

//(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/


/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/

function Finaller(gelenListe) {
	let finalMac = gelenListe.filter((array) => { return array.Stage === "Final"; });
	return finalMac;
}



/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

function Yillar(gelenListe, callback) {
	let finalYillari = callback(gelenListe).map((array) => { return array.Year });
	return finalYillari;
}


/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */

/*function Kazananlar(gelenVeri, callbackFinaller){
	let finalVeri = callbackFinaller(gelenVeri);
	let kazananlarListe=[];
		for (let i = 0; i< finalVeri.length; i++){
		if (finalVeri[i]["Home Team Goals"]>finalVeri[i]["Away Team Goals"]){
			kazananlarListe.push(finalVeri[i]["Home Team Name"]);

		} else if(finalVeri[i]["Home Team Goals"]<finalVeri[i]["Away Team Goals"]){
			kazananlarListe.push(finalVeri[i]["Away Team Name"]);
		} else {
			let winArray= finalVeri[i]["Win conditions"].split(" win");
			kazananlarListe.push(winArray[0]);
		}
	}
	return kazananlarListe;
}

console.log(Kazananlar(fifaData,Finaller));*/






function Kazananlar(gelenListe, callback) {
	let finalKazananlar = callback(gelenListe).map((array) => {
		if (array["Home Team Goals"] > array["Away Team Goals"]) {
			return array["Home Team Name"];
		} else if (array["Away Team Goals"] > array["Home Team Goals"]) {
			return array["Away Team Name"];
		} else {
			let newItem = array["Win conditions"];
			let newArray = newItem.split(" win");
			if (newArray[0] === array["Home Team Name"]) {
				return array["Home Team Name"];
			} else return array["Away Team Name"];
		}
	});
	return finalKazananlar;
}



/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(gelenListe, callbackFinaller, callbackYillar, callbackKazananlar) {

	let yilListesi = callbackYillar(gelenListe, callbackFinaller(gelenListe));
	let kazananUlkeler = callbackKazananlar(gelenListe, callbackFinaller(gelenListe));
	let metinList = yilListesi.map((array, i) => { return `${array} yÄ±lÄ±nda, ${kazananUlkeler[i]} dÃ¼nya kupasÄ±nÄ± kazandÄ±!` });
	return metinList;
}


/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(callback) {
	let finalList = callback;
	let evSahibiVeKonukGol = finalList.map((array) => { return array["Home Team Goals"] + array["Away Team Goals"] });
	let ortalama = evSahibiVeKonukGol.reduce((sum, array) => { return sum = sum + array }) / evSahibiVeKonukGol.length
	return ortalama.toFixed(2);
}
console.log.clear;
console.log(OrtalamaGolSayisi(Finaller(fifaData)));



/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

let initalsList = [];
fifaData.forEach(item => {
	if (!initalsList.includes(item["Home Team Initials"])) {
		initalsList.push(item["Home Team Initials"]);
	} if (!initalsList.includes(item["Away Team Initials"])) {
		initalsList.push(item["Away Team Initials"]);
	}
});



function UlkelerinKazanmaSayilari(data, initalsList) {
	let kazananlar = (data.filter(mac => mac["Stage"] === "Final")).map((array) => {
		if (array["Home Team Goals"] > array["Away Team Goals"]) {
			return array["Home Team Initials"];
		} else if (array["Away Team Goals"] > array["Home Team Goals"]) {
			return array["Away Team Initials"];
		} else {
			let newItem = array["Win conditions"];
			let newArray = newItem.split(" win");
			if (newArray[0] === array["Home Team Name"]) {
				return array["Home Team Initials"];
			} else {
				return array["Away Team Initials"];
			}
		}
	});

	let sonuc = kazananlar.reduce((newObject, key) => {
		if (key in newObject) {
			newObject[key]++;
		} else {
			newObject[key] = 1;
		} return newObject;
	}, {});

	let sonuc2 = {};

	initalsList.forEach(key => {
		if (key in sonuc) {
			sonuc2[key] = sonuc[key];
		} else {
			sonuc2[key] = 0;
		}
	})
	return sonuc2;
}
console.log(UlkelerinKazanmaSayilari(fifaData, initalsList));

/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */

function EnCokGolAtan(data) {
	let enCokGol = 0;
	let enCokGolKey = "";
	let finalMaclar = (data.filter(mac => mac["Stage"] === "Final")).map(mac => {
		return {
			HomeTeamName: mac["Home Team Name"],
			HomeTeamGoals: mac["Home Team Goals"], AwayTeamName: mac["Away Team Name"],
			AwayTeamGoals: mac["Away Team Goals"],
		}
	});
	let totalGol = finalMaclar.reduce((allCountry, finalMaclar) => {
		if (finalMaclar["HomeTeamName"] in allCountry) {
			allCountry[finalMaclar["HomeTeamName"]] += finalMaclar["HomeTeamGoals"];
		}
		if (finalMaclar["AwayTeamName"] in allCountry) {
			allCountry[finalMaclar["AwayTeamName"]] += finalMaclar["AwayTeamGoals"];;
		}
		if (!(finalMaclar["HomeTeamName"] in allCountry)) {
			allCountry[finalMaclar["HomeTeamName"]] = finalMaclar["HomeTeamGoals"];
		}
		if (!(finalMaclar["AwayTeamName"] in allCountry)) {
			allCountry[finalMaclar["AwayTeamName"]] = finalMaclar["AwayTeamGoals"];
		}
		return allCountry;
	}
		, {});
	let property = Object.keys(totalGol);
	for (var elem in totalGol) {
		if (elem === property[0]) {
			enCokGol = totalGol[elem];
		}
		if (enCokGol < totalGol[elem]) {
			enCokGol = totalGol[elem];
			enCokGolKey = elem;
		}

	} console.log(totalGol);
	return enCokGolKey;
}



console.log(EnCokGolAtan(fifaData));
/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(data) {
	let enCokGol = 0;
	let enCokGolKey = "";
	let finalMaclar = (data.filter(mac => mac["Stage"] === "Final")).map(mac => {
		return {
			HomeTeamName: mac["Home Team Name"],
			HomeTeamGoals: mac["Home Team Goals"], AwayTeamName: mac["Away Team Name"],
			AwayTeamGoals: mac["Away Team Goals"],
		}
	});
	let totalGol = finalMaclar.reduce((allCountry, finalMaclar) => {
		if (finalMaclar["HomeTeamName"] in allCountry) {
			allCountry[finalMaclar["HomeTeamName"]] += finalMaclar["AwayTeamGoals"];
		}
		if (finalMaclar["AwayTeamName"] in allCountry) {
			allCountry[finalMaclar["AwayTeamName"]] += finalMaclar["HomeTeamGoals"];;
		}
		if (!(finalMaclar["HomeTeamName"] in allCountry)) {
			allCountry[finalMaclar["HomeTeamName"]] = finalMaclar["AwayTeamGoals"];
		}
		if (!(finalMaclar["AwayTeamName"] in allCountry)) {
			allCountry[finalMaclar["AwayTeamName"]] = finalMaclar["HomeTeamGoals"];
		}
		return allCountry;
	}
		, {});

	console.log(finalMaclar);

	let property = Object.keys(totalGol);
	for (var elem in totalGol) {
		if (elem === property[0]) {
			enCokGol = totalGol[elem];
		}
		if (enCokGol < totalGol[elem]) {
			enCokGol = totalGol[elem];
			enCokGolKey = elem;
		}

	}
	console.log(totalGol);
	return enCokGolKey;

}
console.log(EnKotuDefans(fifaData));

/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */


/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa() {
	console.log('Kodlar Ã§alÄ±ÅŸÄ±yor');
	return 'as';
}
sa();
module.exports = {
	sa,
	Finaller,
	Yillar,
	Kazananlar,
	YillaraGoreKazananlar,
	OrtalamaGolSayisi
}
